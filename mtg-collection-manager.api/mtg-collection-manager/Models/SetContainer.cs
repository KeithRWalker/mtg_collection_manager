// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using mtg_collection_manager.Models;
//
//    var setContainer = SetContainer.FromJson(jsonString);

namespace mtg_collection_manager.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SetContainer
    {
        [JsonProperty("object", NullValueHandling = NullValueHandling.Ignore)]
        public string Object { get; set; }

        [JsonProperty("has_more", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Set> Sets { get; set; }
    }

    public partial class Set
    {
        [JsonProperty("object", NullValueHandling = NullValueHandling.Ignore)]
        public string Object { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("mtgo_code", NullValueHandling = NullValueHandling.Ignore)]
        public string MtgoCode { get; set; }

        [JsonProperty("arena_code", NullValueHandling = NullValueHandling.Ignore)]
        public string ArenaCode { get; set; }

        [JsonProperty("tcgplayer_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? TcgplayerId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Uri { get; set; }

        [JsonProperty("scryfall_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ScryfallUri { get; set; }

        [JsonProperty("search_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SearchUri { get; set; }

        [JsonProperty("released_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ReleasedAt { get; set; }

        [JsonProperty("set_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SetType { get; set; }

        [JsonProperty("card_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? CardCount { get; set; }

        [JsonProperty("digital", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Digital { get; set; }

        [JsonProperty("foil_only", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FoilOnly { get; set; }

        [JsonProperty("block_code", NullValueHandling = NullValueHandling.Ignore)]
        public string BlockCode { get; set; }

        [JsonProperty("block", NullValueHandling = NullValueHandling.Ignore)]
        public string Block { get; set; }

        [JsonProperty("icon_svg_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri IconSvgUri { get; set; }
    }

    public class SimpleSet
    {
        public string Name { get; set; }
        public Guid Id { get; set; }
        public string SetCode { get; set; }
    }

    public partial class SetContainer
    {
        public static SetContainer FromJson(string json) => JsonConvert.DeserializeObject<SetContainer>(json, mtg_collection_manager.Models.Json.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SetContainer self) => JsonConvert.SerializeObject(self, mtg_collection_manager.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
