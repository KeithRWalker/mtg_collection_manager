// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using mtg_collection_manager.Models;
//
//    var symbol = Symbol.FromJson(jsonString);

namespace mtg_collection_manager.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SymbolContainer
    {
        [JsonProperty("object", NullValueHandling = NullValueHandling.Ignore)]
        public string Object { get; set; }

        [JsonProperty("has_more", NullValueHandling = NullValueHandling.Ignore)]
        public bool HasMore { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Symbol> Symbols { get; set; }
    }

    public partial class Symbol
    {
        [JsonProperty("object", NullValueHandling = NullValueHandling.Ignore)]
        public string Object { get; set; }

        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public string SymbolCode { get; set; }

        [JsonProperty("svg_uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SvgUri { get; set; }

        [JsonProperty("loose_variant")]
        public object LooseVariant { get; set; }

        [JsonProperty("english", NullValueHandling = NullValueHandling.Ignore)]
        public string SymbolText { get; set; }

        [JsonProperty("transposable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Transposable { get; set; }

        [JsonProperty("represents_mana", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RepresentsMana { get; set; }

        [JsonProperty("appears_in_mana_costs", NullValueHandling = NullValueHandling.Ignore)]
        public bool AppearsInManaCosts { get; set; }

        [JsonProperty("cmc", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cmc { get; set; }

        [JsonProperty("funny", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Funny { get; set; }

        [JsonProperty("colors", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Colors { get; set; }

        [JsonProperty("gatherer_alternates", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GathererAlternates { get; set; }
    }

    public class SimpleSymbol
    {
        public string SymbolCode { get; set; }
        public string SymbolText { get; set; }
        public Uri ImgUri { get; set; }
        public List<Object> SymbolColors { get; set; }
    }

    public partial class SymbolContainer
    {
        public static SymbolContainer FromJson(string json) => JsonConvert.DeserializeObject<SymbolContainer>(json, mtg_collection_manager.Models.Json.Converter.Settings);
    }
}