// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var symbology = Symbology.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Symbology
    {
        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("has_more")]
        public bool HasMore { get; set; }

        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("svg_uri")]
        public Uri SvgUri { get; set; }

        [JsonProperty("loose_variant")]
        public object LooseVariant { get; set; }

        [JsonProperty("english")]
        public string English { get; set; }

        [JsonProperty("transposable")]
        public bool Transposable { get; set; }

        [JsonProperty("represents_mana")]
        public bool RepresentsMana { get; set; }

        [JsonProperty("appears_in_mana_costs")]
        public bool AppearsInManaCosts { get; set; }

        [JsonProperty("cmc")]
        public long Cmc { get; set; }

        [JsonProperty("funny")]
        public bool Funny { get; set; }

        [JsonProperty("colors")]
        public List<object> Colors { get; set; }

        [JsonProperty("gatherer_alternates")]
        public List<string> GathererAlternates { get; set; }
    }

    public partial class Symbology
    {
        public static Symbology FromJson(string json) => JsonConvert.DeserializeObject<Symbology>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Symbology self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
